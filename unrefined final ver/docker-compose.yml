version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3 
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - dms-network

  kafka:
    image: confluentinc/cp-kafka:7.5.3 
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" 
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092 
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' 
    networks:
      - dms-network
      
  # --- Add MinIO Service ---
  minio:
    image: minio/minio:latest 
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin 
      MINIO_ROOT_PASSWORD: minioadmin 
    command: server /data --console-address ":9001" # Start server, expose console on 9001
    ports:
      - "9000:9000" 
      - "9001:9001" 
    volumes:
      - minio_data:/data 
    networks:
      - dms-network
    healthcheck: # Optional healthcheck
        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
        interval: 30s
        timeout: 20s
        retries: 3

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: documentdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dms-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres
    networks:
      - dms-network

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8085:8085"
    depends_on:
      - auth-service
      - document-service
      - storage-service
    networks:
      - dms-network

  storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    container_name: storage-service
    ports:
      - "8002:8002"
    environment:
      MINIO_ENDPOINT_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: dms-documents
      MINIO_USE_SSL: "false"
    depends_on:
      - minio
    networks:
      - dms-network
    
  document-service:
    build:
      context: ./document-service
      dockerfile: Dockerfile
    container_name: document-service
    depends_on:
      - postgres
      - kafka
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/document_service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8080
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - dms-network

  translation-service:
    build:
      context: ./translation-service
      dockerfile: Dockerfile
    container_name: translation-service
    depends_on:
      document-service:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DOCUMENT_SERVICE_URL: http://document-service:8080
      GEMINI_API_KEY: AIzaSyAlSmyOjBZdoDUB0pI9_mRrMH26vq9gv5E
    networks:
      - dms-network

networks:
  dms-network:
    driver: bridge

volumes:
  minio_data:
  postgres_data: