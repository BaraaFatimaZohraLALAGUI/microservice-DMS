server:
  port: 8080 

spring:
  application:
    name: document-service
  # PostgreSQL configuration for local Docker environment
  datasource:
    url: jdbc:postgresql://postgres:5432/document_service
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # Use 'validate' or 'none' once schema is created. 'update' can be risky.
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  kafka:
    bootstrap-servers: kafka:29092 # Updated to use Kafka container name
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # Use JSON serializer
      properties:
        spring.json.add.type.headers: false # Avoid adding Java type info headers
    # Consumer config might be needed if this service also consumes
    consumer:
      group-id: document_service # If consuming
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*" # Adjust for security

# Custom properties
app:
  kafka:
    topic:
      document-created: document_events
      translation-result: document-translation-results

# Security - Assuming Gateway forwards these headers after validating JWT
gateway:
  auth:
    headers:
      user-id: X-User-Id
      user-roles: X-User-Roles # Comma-separated roles, e.g., "ROLE_USER,ROLE_ADMIN"

# Storage service configuration
storage:
  service:
    url: http://storage-service:8002

logging:
  level:
    root: INFO
    com.example.document_service: DEBUG # Note: Fixed package name
    com.example.document_service.security: TRACE # More detailed logs for security package
    com.example.document_service.service.UserDepartmentService: DEBUG # Track user department assignments
    org.springframework.security: DEBUG # More detailed for Spring Security
    org.springframework.web.filter: DEBUG # Track request filter chain
    org.hibernate.SQL: DEBUG # If show-sql is true
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE # To see bound parameters

# Network settings to help with DNS resolution issues
java:
  net:
    preferIPv4Stack: true

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true